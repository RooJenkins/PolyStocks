// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Agent {
  id            String   @id @default(uuid())
  name          String
  model         String
  color         String
  accountValue  Float    @default(10000)
  cashBalance   Float    @default(10000)
  startingValue Float    @default(10000)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  positions         Position[]
  trades            Trade[]
  decisions         Decision[]
  performancePoints PerformancePoint[]
}

model Position {
  id                   String   @id @default(uuid())
  agentId              String
  symbol               String
  name                 String
  quantity             Float
  entryPrice           Float
  currentPrice         Float
  unrealizedPnL        Float
  unrealizedPnLPercent Float
  openedAt             DateTime @default(now())
  updatedAt            DateTime @updatedAt

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId])
}

model Trade {
  id           String   @id @default(uuid())
  agentId      String
  symbol       String
  name         String
  action       String // BUY or SELL
  quantity     Float
  price        Float
  total        Float
  realizedPnL  Float?
  reasoning    String
  confidence   Float
  timestamp    DateTime @default(now())

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId])
  @@index([timestamp])
}

model Decision {
  id           String   @id @default(uuid())
  agentId      String
  timestamp    DateTime @default(now())

  // Market data at time of decision
  portfolioValue Float
  cashBalance    Float

  // Decision details
  action         String // BUY, SELL, or HOLD
  symbol         String?
  quantity       Float?
  confidence     Float
  reasoning      String
  riskAssessment String
  targetPrice    Float?
  stopLoss       Float?

  // Market context
  marketDataSnapshot String // JSON string of market data

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId])
  @@index([timestamp])
}

model PerformancePoint {
  id           String   @id @default(uuid())
  agentId      String
  timestamp    DateTime @default(now())
  accountValue Float

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId])
  @@index([timestamp])
}

model StockPrice {
  id             String   @id @default(uuid())
  symbol         String
  name           String
  price          Float
  change         Float
  changePercent  Float
  volume         Float?
  timestamp      DateTime @default(now())

  @@index([symbol])
  @@index([timestamp])
}

model NewsItem {
  id          String   @id @default(uuid())
  title       String
  description String?
  url         String
  source      String
  publishedAt DateTime
  symbols     String // Comma-separated stock symbols
  sentiment   String? // POSITIVE, NEGATIVE, NEUTRAL
  createdAt   DateTime @default(now())

  @@index([publishedAt])
  @@index([symbols])
}
